@page "/login"
@using BlazorAppC2Corridor.Views;
@using Microsoft.AspNetCore.DataProtection;
@using Microsoft.AspNetCore.Identity;
@inherits PageBase
@inject UserManager<ApplicationUser> UserManager
@inject IDataProtectionProvider DataProtectionProvider

<h3>Login</h3>
@if (!String.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<EditForm Model="LoginUserData" OnValidSubmit="HandleValidLoginUserSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email</label>
        <ValidationMessage For="@(() => LoginUserData.Email)" />
        <InputText class="form-control" @bind-Value="LoginUserData.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <ValidationMessage For="@(() => LoginUserData.Password)" />
        <InputText class="form-control" @bind-Value="LoginUserData.Password" type="password" />
    </div>
    <div class="text-center">
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>

@code {
    public LoginUser LoginUserData { get; set; } = new LoginUser();
    public string? Error { get; set; }
    [Parameter]
    public string? ReturnPath { get; set; }
    public async Task HandleValidLoginUserSubmit()
    {
        try
        {
            Error = string.Empty;
            var user = await UserManager.FindByEmailAsync(LoginUserData.Email) ?? await UserManager.FindByNameAsync(LoginUserData.Email);
            if (user != null && (!user.LockoutEnabled))
            {
                var passwordOk = await UserManager.CheckPasswordAsync(user, LoginUserData.Password);
                if (passwordOk)
                {
                    var token = await UserManager.GenerateUserTokenAsync(user, TokenOptions.DefaultProvider, "LoginInternal");
                    var data = $"{user.Id}|{token}|{true}|{ReturnPath ?? "/"}";
                    var protector = DataProtectionProvider.CreateProtector("LoginInternal");
                    var protectedData = protector.Protect(data);
                    NavigationManager.NavigateTo("/Account/LoginInternal?token=" + protectedData, true);
                }
            }
            else
            {
                Error = "Invalid login attempt";
            }
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}